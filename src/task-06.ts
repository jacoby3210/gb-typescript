// Задание 6. Алгоритмическая задача — 2
// Используя примитивную типизацию с помощью TypeScript, напишите код, который
// - принимает число,
// - возвращает его цифровой корень.

// Цифровой корень (также известен как корень по основанию 10) для положительного целого числа определяется как сумма его цифр до тех пор, пока не останется одна цифра.

// Например, для числа 942 цифровой корень вычисляется следующим образом: 9 + 4 + 2 = 15, затем 1 + 5 = 6. 
// Получается, что цифровой корень числа 942 равен 6. То же самое справедливо и для числа 493193: 4 + 9 + 3 + 1 + 9 + 3 = 29, 
// затем 2 + 9 = 11, затем 1 + 1 = 2, поэтому цифровой корень числа 493193 равен 2.

// Критерии оценки:
// Принято:
// Функция корректно обрабатывает натуральные числа и ноль.
// Использована типизация примитивов.
// Аргументы и возвращаемое значение функции типизированы.
// На доработку:
// Код не проходит все кейсы.
// В коде не использована типизация.


// Метод рещение поставленной задачи.
function digitalRoot(number: number): number {
	// Функция для вычисления суммы цифр числа
	const sumOfDigits = (num: number): number => {
		return num.toString()
			.split('')
			.reduce((sum, digit) => sum + parseInt(digit, 10), 0);
	};

	// Вычислять сумму цифр, пока результат не станет однозначным числом
	while (number >= 10) number = sumOfDigits(number);
	return number;
}

// Пример использования
const input = 493193;
const result = digitalRoot(input);
console.log(result); // 2

const input2 = 12345;
const result2 = digitalRoot(input2);
console.log(result2); // 6